name: Build Desktop Applications

on:
  push:
    branches: 
      - main
      - 'release/*'  # release/ 형식의 브랜치일 때 실행 (예: release/1.0.0)
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 권한 설정 추가
permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]  # macOS 빌드 비활성화
        include:
          - os: windows-latest
            # output_name과 pyinstaller_args는 아래 step에서 동적으로 설정
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Create sample data directory structure
      run: |
        mkdir -p data/sample
        echo "This is a placeholder for testing the build process." > data/README.txt
        
    - name: Extract version from branch name
      if: startsWith(github.ref, 'refs/heads/release/')
      id: extract_version
      shell: bash
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        VERSION=${BRANCH_NAME#release/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Set default version for non-release branches
      if: ${{ !startsWith(github.ref, 'refs/heads/release/') }}
      run: echo "VERSION=dev" >> $GITHUB_ENV
        
    - name: Set output_name and pyinstaller_args
      id: set_pyinstaller_args
      shell: bash
      run: |
        if [[ "$VERSION" == "dev" ]]; then
          OUTNAME="PDFReportGenerator.exe"
        else
          OUTNAME="PDFReportGenerator-${VERSION}.exe"
        fi
        echo "output_name=$OUTNAME" >> $GITHUB_OUTPUT
        echo "pyinstaller_args=--windowed --onefile --name \"${OUTNAME%.exe}\" --add-data \"main.py;.\" main_gui.py" >> $GITHUB_OUTPUT
        
    - name: Build executable with PyInstaller
      run: pyinstaller ${{ steps.set_pyinstaller_args.outputs.pyinstaller_args }}
    
    - name: Display file size
      shell: pwsh
      run: |
        $filePath = "dist/${{ steps.set_pyinstaller_args.outputs.output_name }}"
        $fileInfo = Get-Item $filePath
        $fileSizeMB = "{0:N2}" -f ($fileInfo.Length / 1MB)
        echo "File: $filePath"
        echo "Size: $fileSizeMB MB"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFReportGenerator-${{ env.VERSION }}-Windows
        path: dist/${{ steps.set_pyinstaller_args.outputs.output_name }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/heads/release/')
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.extract_version.outputs.version }}
        tag_name: v${{ steps.extract_version.outputs.version }}
        draft: false
        prerelease: false
        files: dist/${{ steps.set_pyinstaller_args.outputs.output_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        